variable user { default = "" }
variable environment { }
variable app { default = "" }
variable components { default = "" }
variable name { default = "" }
variable team { }
variable poh { default = "" }
variable count { default = "" }
variable region { default = "" }
variable profile { default = "" }
variable ami { default = "" }
variable iam_role { default = "" }
variable cs_falcon_win_path {}
variable cloudhealth_installer {}
variable ec2_type { default = "t2.medium" }
variable subnets { default = [] }
variable security_groups { default = [] }
variable description {}
variable public_ip { default = false }

// Define the provider to use, pass in region and profile.
provider "aws" {
  region  = "${var.region}"
  profile = "${var.profile}"
}

// This defines a "template" to use which is then applied to userdata field of EC2 resource.
data "template_file" "init" {
  template = <<EOF
  <powershell>
    Set-Location c:\scripts
    aws s3 sync s3://terraform/packer-only .
    & ./init.ps1 -Environment ${var.environment}
  </powershell>
  EOF
}

// Provides a means of randomizing the passed-in list of subnets.
// This prevents us from always using the first subnet in the list.
resource "random_shuffle" "subnets_shuffled" {
  input = ["${var.subnets}"]
}

// The EC2 resource to create.
resource "aws_instance" "Instance" {
  ami                         = "${var.ami}"
  instance_type               = "${var.ec2_type}"
  iam_instance_profile        = "${var.iam_role}"
  subnet_id                   = "${element(random_shuffle.subnets_shuffled.result,count.index)}"
  vpc_security_group_ids      = "${var.security_groups}"
  associate_public_ip_address = "${var.public_ip}"

  tags {
    Name         = "${var.name}"
    Environment  = "${var.environment}"
    App          = "${var.app}"
    Components   = "${var.components}"
    Owner        = "${var.user}"
    Team         = "${var.team}"
    PowerOnHours = "${var.poh}"
    Description = "${var.description}"
  }
  count     = "${var.count}"
  user_data = "${data.template_file.init.rendered}"
  // provisioner "local-exec" {
  //   when = "destroy"
  //   command = "Remove-computer -Server ${aws_instance.Instance.*.id}"
  // }
}

// Some outputs for clients of the module to use.
output "InstanceID" {
  description = "List of IDs of instances"
  value       = ["${aws_instance.Instance.*.id}"]
}
output "PrivateIP" {
    description = "IP addresses"
    value       = ["${aws_instance.Instance.*.private_ip}"]
}

output "Tags" {
    description = "Tags of instances"
    value       = ["${aws_instance.Instance.*.tags}"]
}
